/* Get short value font property */
getFont($size = $font.size, $lineHeight = $font.height, $weight = $font.weight) {
  return s('%s %s %s %s/%s %s', $font.style, $font.variant, $weight, $size, $lineHeight, unquote($font.family));
}


/* Get base (root) em size */
getBaseEm() {
  $unit = unit($font.size);
  $value = unit($font.size, '');

  if ($unit is 'px') {
    return $value;
  } else if ($unit is 'pt') {
    return $value / 3 * 4;
  } else {
    return 16;
  }
}


/* Convert px to em ($base is em-size) */
px2em($px, $base = getBaseEm()) {
  return unit($px / $base, 'em');
}

/* Convert px to rem */
px2rem($px) {
  return unit($px / getBaseEm(), 'rem');
}

/* Convert px to pt */
px2pt($px) {
  return unit($px * .75, 'pt');
}


/* Get Media query width */
getMQWidth($i) {
  return px2em($pageLayout.screens[$i] + ($pageLayout.screens[$i] == 0 ? 0 : $pageLayout.marginPage[$i] * 2))
}


/* Generate crossbrowser property arguments */
getXBrowserArgs($arguments) {
  $args = ()
  $res = ()

  if (list-separator($arguments) == ',') {
    for $arg in $arguments {
      push($args, join(' ', $arg))
    }
  } else {
    push($args, join(' ', $arguments))
  }

  for $arg, $i in $args {
    $arg = split(' ', $arg)
    $arg[0] = $propName = replace('\(\)$', '', join('', $arg[0]))
    $argSrc = join(' ', $arg)

    if ($mixinPropsPrefixes[$arg[0]]) {
      $propPrefix = (match('-(\w+)-', current-property[0]))[1]

      if ($propPrefix and index($mixinPropsPrefixes[$arg[0]], $propPrefix) is not null) {
        $arg[0] = unquote('-' + $propPrefix + '-' + $propName)
        push($res, unquote(join(' ', $arg)))
      } else {
        for $prefix in $mixinPropsPrefixes[$arg[0]] {
          $arg[0] = unquote('-' + $prefix + '-' + $propName)
          push($res, unquote(join(' ', $arg)))
        }
      }
    }

    push($res, unquote($argSrc))
  }

  return unquote(join(',', $res))
}


/* Generate css properties with prefixes */
getXBrowserProps($args, $prefixes) {
  $propsWithEnumerate = 'transition'//, 'transition-property'

  for $prefix, $i in $prefixes {
    if (index($propsWithEnumerate, current-property[0]) is not null) {
      -{$prefix}-{current-property}: getXBrowserArgs($args);

      if ($i == length($prefixes) - 1) {
        {current-property}: getXBrowserArgs($args);
      }
    } else {
      -{$prefix}-{current-property}: $args;

      if ($i == length($prefixes) - 1) {
        {current-property}: $args;
      }
    }
  }
}


/* Proxy for properties blocks */
applyPropMixin($block) {
  if (IS_PRODUCTION) {
    +cache(current-property) {
      {$block}
    }
  } else {
    {$block}
  }
}


/* Extending property with crossbrowser css functions (e.g., "linear-gradient") */
extendPropWithXArgs($phrases, $prefixes) {
  $value = join(list-separator(current-property[1]), current-property[1]);

  for $prefix in $prefixes {
    $_value = clone($value);

    if (match('/' + $phrase + '/', $_value)) {
      for $phrase in $phrases {
        $_value = replace('\b' + $phrase + '\b', s('-%s-%s', $prefix, $phrase), $_value)
      }

      add-property(current-property[0], unquote($_value));
    }
  }

  add-property(current-property[0], unquote($value));
}
