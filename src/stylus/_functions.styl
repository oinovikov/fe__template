/* Get short value font property */
getFont($size = $font.size, $lineHeight = $font.height, $weight = $font.weight) {
  return $font.style $font.variant $weight $size\/$lineHeight unquote($font.family);
}


/* Get base (root) em size */
getBaseEm() {
  $unit = unit($font.size);
  $value = unit($font.size, '');

  if ($unit is 'px') {
    return $value;
  } else if ($unit is 'pt') {
    return $value / 3 * 4;
  } else {
    return 16;
  }
}


/* Convert px to em */
px2em($px) {
  return unit($px / getBaseEm(), 'em');
}

/* Convert px to rem */
px2rem($px) {
  return unit($px / getBaseEm(), 'rem');
}

/* Convert px to pt */
px2pt($px) {
  return unit($px * .75, 'pt');
}


/* Imitation crossbrowser mixin for css calc() function */
calc() {
  add-property(current-property[0], s('-webkit-calc(%s)', arguments));
  add-property(current-property[0], s('-moz-calc(%s)', arguments));
  s('calc(%s)', arguments);
}


/* Get Media query width */
getMQWidth($i) {
  return px2em($pageLayout.screens[$i] + ($pageLayout.screens[$i] == 0 ? 0 : $pageLayout.marginPage[$i] * 2))
}


/* Styling parent text selection */
selection($bg = #bb6bd9, $text = #020301)
  for $prefix in ('::-moz-' '::')
    & {$prefix}selection
      background-color $bg
      color $text
      text-shadow none


/* Styling scrollbar */
scroll($barBg = #fff, $thumbBg = #333, $thumbHoverBg = #444, $borderColor = transparent)
  if $barBg == 'none'
    -ms-overflow-style none

    &::-webkit-scrollbar
      display none

      &-button, &-thumb, &-track, &-corner
        display none
  else
    -ms-overflow-style -ms-autohiding-scrollbar

    &::-webkit-scrollbar
      if $borderColor != transparent
        width .5em
        height .5em
      else
        width .25em
        height .25em
      background-color ($barBg ?: transparent)

      &-button
        width 0
        height 0
        background transparent

      &-thumb
        if $borderColor != transparent
          border .125em solid $borderColor
          border-radius .25em
        else
          border-radius .125em
        background-color $thumbBg

        &:hover
          background-color $thumbHoverBg

      &-track
        margin px2em(2)
        background-color $borderColor

      &-corner
        background-color $barBg


/* Generate crossbrowser fields placeholder */
placeholder($font = getFont(), $color = #eee)
  for $prefix in ('::-webkit-input-' '::-moz-' ':-ms-input-' ':-moz-' '::')
    &{$prefix}placeholder
      font: $font
      color: $color
      if @letter-spacing
        letter-spacing: @letter-spacing
      text-overflow: ellipsis


/* Mixin in mixins crossbrowser properties names */
getMixinArguments($args, $props)
  $prefixCurrentProp = (match('-(\w+)-', current-property[0]))[1]

  if join(' ', $args[0]) == join(' ', $args[0][0])
    $args = join(' ', $args)

  for $arg in $args
    $arg = join(' ', $arg)

    for $name, $prefix in $props
      if match($name, $arg, 'i')
        if $prefixCurrentProp and index($prefix, $prefixCurrentProp) >= 0
          $nameWithPrefix = '-' + $prefixCurrentProp + '-' + $name
          if !($res is defined)
            $res = replace($name + '(?:\(\))?', $nameWithPrefix, $arg)
          else
            push($res, replace($name + '(?:\(\))?', $nameWithPrefix, $arg))
        else
          for $i in 0...length($prefix)
            $nameWithPrefix = '-' + $prefix[$i] + '-' + $name
            if !($res is defined)
              $res = replace($name + '(?:\(\))?', $nameWithPrefix, $arg)
            else
              push($res, replace($name + '(?:\(\))?', $nameWithPrefix, $arg))

    if !($res is defined)
      $res = replace('\(\)', '', $arg)
    else
      push($res, replace('\(\)', '', $arg))

  $res = unquote(join(',', $res))
  return $res


/* Generate css properties with prefixes */
getXBrowserProps($args, $prefixes)
  for $prefix in $prefixes
    if current-property[1] == __CALL__
      add-property('-' + $prefix + '-' + current-property[0], $args)
    else
      -{$prefix}-{current-property}: getMixinArguments($args, $mixinPropsPrefixes)
  if current-property[1] == __CALL__
    $args
  else
    {current-property}: getMixinArguments($args, $mixinPropsPrefixes)
